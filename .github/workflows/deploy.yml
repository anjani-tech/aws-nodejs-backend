name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SSH for connecting to EC2
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 3: Install dependencies and create ZIP
      - name: Install dependencies and create ZIP
        id: zip_creation
        run: |
          echo "Installing dependencies and preparing the build..."

          # Set environment variables for NPM and Node environment
          export NODE_ENV=${{ secrets.NODE_ENV }}
          export NPM_TOKEN=${{ secrets.NPM_TOKEN }}

          # Run the install.sh script, which handles npm install and dependency setup
          chmod +x ./scripts/install.sh
          ./scripts/install.sh || { echo "install.sh script failed"; exit 1; }

          # Declare version only once for consistency
          VERSION=$(date +'%Y%m%d%H%M%S')
          ZIP_NAME="airfi-core-${VERSION}.zip"

          # Create a zip file of the entire project directory, including node_modules
          zip -r $ZIP_NAME . || { echo "ZIP creation failed"; exit 1; }

          # Create the temporary directory to store the ZIP file
          TEMP_DIR="/tmp/airfi-core-temp"
          mkdir -p $TEMP_DIR

          # Move the ZIP file to the temporary directory for upload
          mv $ZIP_NAME $TEMP_DIR/${ZIP_NAME}
          echo "ZIP file ready for upload: ${TEMP_DIR}/${ZIP_NAME}"

          # Output the version so that the next step can use it
          echo "::set-output name=version::${VERSION}"

      # Step 4: Upload the ZIP file to EC2
      - name: Upload ZIP file to EC2
        run: |
          VERSION=${{ steps.zip_creation.outputs.version }}  # Get the VERSION output from Step 3
          echo "Uploading ZIP file to EC2..."

          # Ensure the target directory exists and is writable by checking and creating it if necessary
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP_ADDRESS }} << EOF
            # Check if the directory exists, and create it recursively if not
            TARGET_DIR="/home/ubuntu/airfi-core-builds"
            sudo mkdir -p \$TARGET_DIR
            sudo chown -R ubuntu:ubuntu \$TARGET_DIR
          EOF

          # Use SCP (Secure Copy Protocol) to upload the ZIP file to EC2
          scp -o StrictHostKeyChecking=no /tmp/airfi-core-temp/airfi-core-${VERSION}.zip ubuntu@${{ secrets.EC2_IP_ADDRESS }}:/home/ubuntu/airfi-core-builds/ || { echo "SCP upload failed"; exit 1; }

      # Step 5: Deploy and unpack the ZIP on EC2
      - name: Deploy and unpack ZIP on EC2
        run: |
          VERSION=${{ steps.zip_creation.outputs.version }}  # Get the VERSION output from Step 3
          echo "Deploying and unpacking ZIP file on EC2..."
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP_ADDRESS }} << EOF
            # Step 5a: Use the same VERSION passed from GitHub Actions
            VERSION=${VERSION}

            # Step 5b: Ensure the 'airfi-core' and 'app' directories exist
            AIRFI_CORE_DIR="/home/ubuntu/airfi-core"
            APP_DIR="${AIRFI_CORE_DIR}/app"

            echo "Ensuring directories exist..."
            sudo mkdir -p \$AIRFI_CORE_DIR  # Ensure 'airfi-core' directory exists

            # Step 5c: Create a new directory to unzip the content
            NEW_DIR="/home/ubuntu/airfi-core-builds/airfi-core-${VERSION}"
            echo "Unzipping the file into ${NEW_DIR}..."
            if [ -f "/home/ubuntu/airfi-core-builds/airfi-core-${VERSION}.zip" ]; then
              sudo unzip /home/ubuntu/airfi-core-builds/airfi-core-${VERSION}.zip -d \$NEW_DIR || { echo "Unzip failed"; exit 1; }
            else
              echo "ZIP file not found, aborting deployment."
              exit 1
            fi

            # Debugging: Check contents of the unzipped directory
            echo "Contents of \$NEW_DIR:"
            ls -l \$NEW_DIR

            # Step 5d: Create the symbolic link to the new folder (automatically replaces any existing link)
            echo "Ensuring permissions before creating symlink..."
            sudo ln -sfn \$NEW_DIR \$APP_DIR

            # Verify the symlink creation
            echo "Current contents of \$APP_DIR after symlink creation:"
            ls -l \$APP_DIR

            # Step 5e: Stop the existing services (if any) before starting the new ones
            echo "Stopping services..."
            sudo chmod +x /home/ubuntu/airfi-core/app/scripts/application-stop.sh
            sudo /home/ubuntu/airfi-core/app/scripts/application-stop.sh

            # Step 5f: Start the new services
            echo "Starting services..."
            sudo chmod +x /home/ubuntu/airfi-core/app/scripts/application-start.sh
            sudo /home/ubuntu/airfi-core/app/scripts/application-start.sh

            echo "Deployment completed successfully!"
          EOF

      # Step 6: Clean up the temporary folder
      - name: Clean up temporary folder
        run: |
          TEMP_DIR="/tmp/airfi-core-temp"
          rm -rf $TEMP_DIR
          echo "Temporary folder cleaned up."
