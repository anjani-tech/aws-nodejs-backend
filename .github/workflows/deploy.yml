name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SSH for connecting to EC2
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 3: Install dependencies and create the ZIP file
      - name: Install dependencies and create ZIP
        run: |
          echo "Installing dependencies and preparing the build..."

          # Step 3a: Set environment variables for NPM and Node environment
          export NODE_ENV=${{ secrets.NODE_ENV }}
          export NPM_TOKEN=${{ secrets.NPM_TOKEN }}

          # Step 3b: Run the install.sh script, which handles npm install and dependency setup
          echo "Running additional installation scripts..."
          chmod +x ./scripts/install.sh
          ./scripts/install.sh || { echo "install.sh script failed"; exit 1; }

          # Step 3c: Declare version only once for consistency
          VERSION=$(date +'%Y%m%d%H%M%S')
          ZIP_NAME="airfi-core-${VERSION}.zip"

          # Step 3d: Create a zip file of the entire project directory, including node_modules
          echo "Creating zip file: ${ZIP_NAME}"
          zip -r $ZIP_NAME . || { echo "ZIP creation failed"; exit 1; }

          # Step 3e: Move the ZIP file to a temporary location to upload it later
          mv $ZIP_NAME /tmp/${ZIP_NAME}
          echo "ZIP file ready for upload: /tmp/${ZIP_NAME}"

      # Step 4: Upload the ZIP file to the EC2 instance
      - name: Upload ZIP file to EC2
        run: |
          echo "Uploading ZIP file to EC2..."

          # Step 4a: Use SCP (Secure Copy Protocol) to upload the ZIP file to EC2
          scp -o StrictHostKeyChecking=no /tmp/airfi-core-${VERSION}.zip ubuntu@${{ secrets.EC2_IP_ADDRESS }}:/home/ubuntu/airfi-core-builds/ || { echo "SCP upload failed"; exit 1; }

      # Step 5: Deploy and unpack the ZIP file on EC2
      - name: Deploy and unpack ZIP on EC2
        run: |
          echo "Deploying and unpacking ZIP file on EC2..."
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP_ADDRESS }} << EOF
            # Step 5a: Use the same VERSION passed from GitHub Actions
            VERSION=${VERSION}

            # Step 5b: Ensure the directory is writable and exists
            sudo mkdir -p /home/ubuntu/airfi-core-builds/${VERSION}

            # Step 5c: Unzip the uploaded file into the corresponding directory
            echo "Unzipping the file..."
            if [ -f "/home/ubuntu/airfi-core-builds/airfi-core-${VERSION}.zip" ]; then
              sudo unzip /home/ubuntu/airfi-core-builds/airfi-core-${VERSION}.zip -d /home/ubuntu/airfi-core-builds/${VERSION} || { echo "Unzip failed"; exit 1; }
            else
              echo "ZIP file not found, aborting deployment."
              exit 1
            fi

            # Step 5d: Create a symbolic link between the new version and the app directory
            echo "Creating symbolic link..."
            sudo rm -rf /home/ubuntu/airfi-core/app
            sudo ln -s /home/ubuntu/airfi-core-builds/${VERSION}/airfi-core /home/ubuntu/airfi-core/app || { echo "Symbolic link creation failed"; exit 1; }

            # Step 5e: Stop the existing services (if any) before starting the new ones
            echo "Stopping services..."
            sudo chmod +x /home/ubuntu/airfi-core/app/scripts/application-stop.sh
            sudo /home/ubuntu/airfi-core/app/scripts/application-stop.sh

            # Step 5f: Start the new services
            echo "Starting services..."
            sudo chmod +x /home/ubuntu/airfi-core/app/scripts/application-start.sh
            sudo /home/ubuntu/airfi-core/app/scripts/application-start.sh

            echo "Deployment completed successfully!"
          EOF
